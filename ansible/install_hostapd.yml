# Dependencies

- hosts: localhost
  gather_facts: false

  vars:
    - my_name: "hostapd"
    - my_file: "install_{{ my_name }}"
    - module_name: "hostapd"

    - packages:
      - hostapd
      - pwgen

    - my_services: "hostapd-retronas.service"

    - templates:
      - { name: "hostapd-retronas.conf",    sub: "", dest: "/etc/{{ my_name }}", force: no, mode: "0640" }
      - { name: "hostapd-dnsmasq.conf",     sub: "", dest: "/etc/dnsmasq.d/retro/", force: no, mode: "0640" }
      - { name: "hostapd-retronas.service", sub: "", dest: "/etc/systemd/system" }

    - paths:
      - { name: "dnsmasq.d",       dest: "/etc",              state: "directory", mode: "0755" }
      - { name: "retro",           dest: "/etc/dnsmasq.d",    state: "directory", mode: "0755" }


  tasks:
  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - ansible.builtin.import_role:
      name: retronas.role.package.latest

  - name: "{{ my_name }} - generate password"
    shell:
      cmd: pwgen -s 12 1
    no_log: true
    register: retronas_wifi_password

  - name: "{{ my_name }} - generate unique ssid"
    shell:
      cmd: echo "retronas-$(pwgen 8 -A -0 -B 1)"
    no_log: true
    register: retronas_net_wifi_ssid
    when: retronas_net_wifi_ssid == ""

  - name: "{{ my_name }} - update wifi ssid config"
    lineinfile:
      path: /opt/retronas/ansible/retronas_vars.yml
      regexp: ^retronas_net_wifi_ssid: ""
      line: 'retronas_net_wifi_ssid: "{{ retronas_net_wifi_ssid.stdout_lines[0] }}"'
    when: retronas_net_wifi_ssid is defined

  - name: "{{ my_name }}  - Re-read RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - ansible.builtin.import_role:
      name: retronas.role.paths

  - ansible.builtin.import_role:
      name: retronas.role.templates

  - name: "{{ my_name }} - enable"
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
      enabled: yes
      daemon_reload: yes
      force: yes
    with_items: "{{ my_services }}"

  - ansible.builtin.import_role:
      name: retronas.role.system-config

  handlers:
  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item }}"
      state: restarted
      daemon_reload: yes
      force: yes
    with_items: "{{ my_services }}"