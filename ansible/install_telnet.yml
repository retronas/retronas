- hosts: localhost
  gather_facts: no

  vars:
    - my_name: "Telnet"
    - my_file: "install_telnet"

    - firewalld_rules:
      - { zone: "retro", service: "telnet" }

    - templates:
      - { name: "telnet", dest: "/etc/xinetd.d", force: no }

    - firewalld_rules:
      - { zone: "retro", service: "telnet" }

    - packages:
         - telnet
         - telnetd
         - xinetd

  tasks:

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - ansible.builtin.import_role:
      name: retronas.role.package.latest

  - name: "{{ my_name }} - Enable startup services"
    ansible.builtin.service:
      name: xinetd
      state: started
      enabled: yes

  - name: "{{ my_name }} - templates"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ item.name }}.j2"
      dest: "{{ item.dest }}/{{ item.name }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0644') }}"
      force: "{{ item.force|default('yes') }}"
    with_items: "{{ templates }}"
    notify: "{{ my_name }} - Restart services"

  #
  # FIREWALL
  #
  - name: "{{ my_name }} - checking firewall rule"
    ansible.builtin.stat:
      path: /etc/firewalld/services
    register: firewalld_services

  - name: "{{ my_name }} - enable firewall rule"
    ansible.posix.firewalld:
      zone: "{{ item.zone | default('retro') }}"
      service: "{{ item.service | default('telnet') }}"
      permanent: true
      state: enabled
      immediate: true
    with_items: "{{ firewalld_rules }}"
    when: firewalld_services.stat.exists

  handlers:

  - name: "{{ my_name }} - Restart services"
    ansible.builtin.service:
      name: xinetd
      state: restarted

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "telnet"
    module_state: "present"