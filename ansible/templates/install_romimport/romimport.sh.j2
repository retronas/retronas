#!/bin/bash

set -u

TDIR="{{retronas_root}}/bin/Hardware-Target-Game-Database"
MANIPULATE=0
FORCE=0
XTERMINATE=0
TARGET=""

declare -A SYSTEMS

SYSTEMS=(
  {% for item in system_map if item.smdb %}
  [{{ item.src }}]="{{ item.smdb }}"
  {% endfor %}
)


## REQUIREMENTS
[ ! -d "${TDIR}" ] &&  echo "Cannot locate ROM import SMBD directory. Please add it from the Install Things menu." && exit 1

## hacky af
list_targets() {
  echo "Use id with -t to run a single system"
  echo "-------------------------------------"

  ### dump to screen
  for SYSTEM in ${!SYSTEMS[@]}
  do
    echo "id: ${SYSTEM}, ${SYSTEMS[$SYSTEM]}"
  done | column -s"," -t
  exit 0
}

_usage() {
  echo "Usage $0" 
  echo "-h this help"
  echo "-t target system"
  echo "-l list available targets"
  exit 0
}

OPTSTRING="hlt:"
while getopts $OPTSTRING ARG
do
  case $ARG in
    h)
      _usage
      ;;
    l)
      # list targets
      list_targets
      ;;
    t)
      TARGET=${OPTARG}
      ;;
  esac
done

run_buildpack() {
  IFS=$'\n'
  local ODIR="${1}"
  local SMDB="${2}"
  local MSDB="$(basename $(echo $SMDB) .txt)"

  # UNARMED FOR TESTING
  cd "${TDIR}"
  python3 build_pack.py --input_folder "{{retronas_path}}/romimport" --output_folder "${ODIR}" --database "${SMDB}" --file_strategy smart --skip_existing --drop_initial_directory --missing "{{retronas_path}}/romimport/${MSDB}_missing.txt"

}

updateSMDB() {
  cd ${TDIR}
  echo "Refreshing SMBDs..."
  umask 0002
  git config pull.rebase false
  git reset --hard HEAD
  git pull
}

auditsystem() {

  local SYSTEM="${1:-IAMNOTFOUND}"

  if [ ${SYSTEMS[${SYSTEM}]+_} ]
  then
    ODIR="{{retronas_path}}/roms/${SYSTEM}"
    SMDB="./EverDrive Pack SMDBs/${SYSTEMS[${SYSTEM}]}"

    if [ -d "${ODIR}" ]
    then 
      echo '------------------------'
      echo "Analysing with ${SMDB}"
      echo "Outputting to ${ODIR}"
      run_buildpack "${ODIR}" "${SMDB}"
      echo -e '------------------------\n'
    else
      echo "Failed to file output directory ${ODIR}"
    fi
  else 
    _usage
  fi
}

if [ -z "${TARGET}" ]
then
  updateSMDB
  for SYSTEM in ${!SYSTEMS[@]}
  do
    auditsystem ${SYSTEM}
  done
else
  updateSMDB
  auditsystem ${TARGET}
fi
