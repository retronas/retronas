# Dependencies
- import_playbook: install_romdir.yml

- hosts: localhost
  gather_facts: yes

  vars:
    - my_name: "ps3netsrv"
    - my_file: "install_ps3netsrv"

    - systemd_units:
      - { name: "ps3netsrv", type: 'service', state: "started", enabled: "yes", restart: "yes", instance: "no" }
      - { name: "ps3netsrv-perms", type: 'service', state: "started", enabled: "no", restart: "yes", instance: "no" }
      - { name: "ps3netsrv-perms", type: 'timer', state: "started", enabled: "yes", restart: "yes", instance: "no" }

    - packages:
      - make
      - automake
      - autoconf
      - gcc
      - g++
      - meson
      - ninja-build
      - curl
      - wget
      - build-essential
      - unzip
      - libmbedtls-dev
      - coreutils
      - jq

    - packages_debian:
        debian10:
          - libmbedtls12
        debian11:
          - libmbedtls12
        debian12:
          - libmbedtls14

    - packages_ubuntu:
      - libmbedtls14


  tasks:

  - name: "{{ my_name }} - Include systems map"
    ansible.builtin.include_vars: "retronas_systems.yml"

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - name: "{{ my_name }} - Install build tools"
    ansible.builtin.package:
       name: "{{ packages }}"
       state: latest

  - name: "{{ my_name }} - Install build tools (debian)"
    ansible.builtin.package:
       name: "{{ packages_debian['debian' + ansible_distribution_major_version ] }}"
       state: latest
    when: ansible_distribution == 'Debian'

  - name: "{{ my_name }} - Install build tools (ubuntu)"
    ansible.builtin.package:  
       name: "{{ packages_ubuntu }}"
       state: latest
    when: ansible_distribution == 'Ubuntu'

  - name: "{{ my_name }} - build top level"
    ansible.builtin.file:
      path: "{{ retronas_path }}/ps3/ps3netsrv"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      state: directory
      mode: "0775"
    notify: "{{ my_name }} - Restart service"
      
  - name: "{{ my_name }} - build layout"
    ansible.builtin.file:
      src: "../../roms/{{ item.src }}"
      dest: "{{ retronas_path }}/ps3/ps3netsrv/{{ item.ps3netsrv }}"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      state: link
    with_items:
      - "{{ system_sony }}"
      - "{{ system_videos }}"
    when:
      - item.ps3netsrv | length > 0

  - name: "{{ my_name }} - Generate {{ my_file }} script"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_file }}.sh.j2"
      dest: "{{ retronas_root }}/scripts/{{ my_file }}.sh"
      owner: root
      group: root
      mode: 0755

  - name: "{{ my_name }} - Install from source code"
    ansible.builtin.shell: "{{ retronas_root }}/scripts/{{ my_file }}.sh 2>&1 | tee {{ retronas_root }}/log/{{ my_file }}.log"
    args:
      creates: "{{ retronas_root}} /bin/ps3netsrv"

  - name: "{{ my_name }} - create startup service(s)"
    ansible.builtin.template:
      src: templates/{{ my_file }}/{{ item.name }}.{{ item.type }}.j2
      dest: /usr/lib/systemd/system/{{ item.name }}.{{ item.type }}
      owner: root
      group: root
      mode: 0644
    with_items:
      "{{ systemd_units }}"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable service(s)"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items: "{{ systemd_units }}"
    when:
      - item.instance == 'no'
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable service(s)"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items: "{{ systemd_units }}"
    when:
      - item.instance == 'no'

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: restarted
      daemon_reload: yes
    with_items: "{{ systemd_units }}"
    when: 
      - item.restart == 'yes'
      - item.instance == 'no'

  - name: "{{ my_name }} - Restart instances"
    ansible.builtin.service:
      name: "{{ item.1.name }}{{ item.0.dest }}.{{ item.1.type }}"
      state: restarted
      daemon_reload: yes
    with_items:
      - "{{ system_map }}"
      - "{{ systemd_units }}"
    when: 
      - item.1.restart == 'yes'
      - item.1.instance == 'yes'

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "ps3netsrv"
    module_state: "present"