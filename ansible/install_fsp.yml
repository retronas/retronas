# Dependencies
- ansible.builtin.import_playbook: install_romdir.yml

- hosts: localhost
  gather_facts: no

  vars:
    - my_name: "FSP for Swiss"
    - my_file: "install_fsp"
    - my_service: "fspd"

    - my_packages:
      - python3
      - python-is-python3
      - build-essential
      - flex
      - gcc
      - scons

    - swiss_dirs:
      - swiss
      - tmp

    - swiss_rw:
      - .FSP_OK_ADD
      - .FSP_OK_DEL
      - .FSP_OK_MKDIR
      - .FSP_OK_RENAME

  tasks:

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - name: "{{ my_name }} - Load RetroNAS systems"
    ansible.builtin.include_vars: retronas_systems.yml

  - name: "{{ my_name }} - Install build tools"
    ansible.builtin.package:
       name: "{{ my_packages }}"
       state: latest

  - name: "{{ my_name }} - check systemd unit folder"
    ansible.builtin.file:
      path: /usr/lib/systemd/system
      owner: root
      group: root
      mode: 0755
      state: directory

  - name: "{{ my_name }} - build top level dirs"
    ansible.builtin.file:
      path: "{{ retronas_path }}/gamecube/swiss/{{ item }}"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      state: directory
      mode: "0775"
    with_items: "{{ swiss_dirs }}"
    notify: "{{ my_name }} - Restart service"
      
  - name: "{{ my_name }} - build layout"
    ansible.builtin.file:
      src: "../../roms/{{ item.src }}"
      dest: "{{ retronas_path }}/gamecube/swiss/{{ item.fspd }}"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      state: link
    with_items: "{{ system_nintendo }}"
    when:
      item.fspd | length > 0
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - Generate install scripts"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_file }}.sh.j2"
      dest: "{{ retronas_root }}/scripts/{{ my_file }}.sh"
      owner: root
      group: root
      mode: 0755

  - name: "{{ my_name }} - Install from source code"
    ansible.builtin.shell: "{{ retronas_root }}/scripts/{{ my_file }}.sh 2>&1 | tee {{ retronas_root }}/log/{{ my_file }}.log"
    #args:
      #creates: "{{ retronas_root}} /bin/fsp"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - Generate config file"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_service }}.conf.j2"
      dest: "{{ retronas_root }}/bin/fsp/etc/{{ my_service }}.conf"
      owner: root
      group: root
      mode: 0755 

  - name: "{{ my_name }} - Set write permissions top level"
    ansible.builtin.copy:
      content: ""
      dest: "{{ retronas_path }}/gamecube/swiss/{{ item }}"
      force: no
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      mode: 0644
    with_items: "{{ swiss_rw }}"

  - name: "{{ my_name }} - Set write permissions swiss subdir"
    ansible.builtin.copy:
      content: ""
      dest: "{{ retronas_path }}/gamecube/swiss/swiss/{{ item }}"
      force: no
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      mode: 0644
    with_items: "{{ swiss_rw }}"

  - name: "{{ my_name }} - create startup service"
    ansible.builtin.template:
      src: templates/{{ my_file }}/fspd.service.j2
      dest: /usr/lib/systemd/system/fspd.service
      owner: root
      group: root
      mode: 0644
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable startup service"
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
      enabled: yes
      daemon_reload: yes
    with_items: "{{ my_service }}"

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item }}"
      state: restarted
      daemon_reload: yes
    with_items: "{{ my_service }}"

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "fsp"
    module_state: "present"