- hosts: localhost
  gather_facts: yes

  vars:
    - my_name: "piscsi"
    - my_file: "install_piscsi"

    - my_packages:
      - bridge-utils
      - build-essential
      - disktype
      - clang
      - genisoimage
      - git
      - libev-dev
      - libevdev2
      - libgmock-dev
      - libpcap-dev
      - libpcap0.8-dev
      - libprotobuf-dev
      - libspdlog-dev 
      - man2html
      - nginx-light
      - protobuf-compiler
      - python3 
      - python3-dev 
      - python3-pip
      - python3-setuptools
      - python3-venv 
      - python3-wheel
      - unar
      - unzip
      - ca-certificates
      - hfsutils
      - dosfstools
      - kpartx
      - unzip
      - unar 
      - disktype
      - gettext
      - rsyslog

    - paths:
      - { name: "{{ my_name }}", dest: "{{ retronas_path }}", owner: "{{ retronas_user }}", group: '{{ retronas_group }}' }
      - { name: "src", dest: "{{ retronas_root }}", owner: "{{ retronas_user }}", group: '{{ retronas_group }}' }
      - { name: "{{ my_name }}", src: "{{ retronas_path }}/{{ my_name }}", dest: "/home/{{ retronas_user }}", state: "link" }

    - templates:
      - { name: "{{ my_file }}.sh", dest: "{{ retronas_root }}/scripts", mode: "0755"}
      - { name: "{{ my_file }}_standard.sh", dest: "{{ retronas_root }}/scripts", mode: "0755"}
      - { name: "{{ my_name }}_retronas_patch.diff", dest: "{{ retronas_root }}/src"}
      - { name: "{{ my_name }}.service", dest: "/etc/systemd/system"}

    - systemd_units:
      - { name: "rsyslog", type: 'service', state: "restarted", enabled: "yes", restart: "yes", instance: "no" }
      - { name: "piscsi", type: 'service', state: "started", enabled: "yes", restart: "yes", instance: "no" }

  tasks:

  - name: "{{ my_name }} - Load RetroNAS config"
    include_vars: retronas_vars.yml

  # libpcap can conflict with libpcap from backport (tcpdump etc)
  - name: "{{ my_name }} - Install build tools"
    apt:
       name: "{{ my_packages }}" 
       state: latest

  - name: "{{ my_name }} - paths"
    file:
      src: "{{ item.src | default(omit) }}"
      dest: "{{ item.dest }}/{{ item.name }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0755') }}"
      state: "{{ item.state|default('directory') }}"
    with_items: "{{ paths }}"

  - name: "{{ my_name }} - templates"
    template:
      src: "templates/{{ my_file }}/{{ item.name }}.j2"
      dest: "{{ item.dest }}/{{ item.name }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0644') }}"
      force: "{{ item.force|default('yes') }}"
    with_items: "{{ templates }}"

  - name: "{{ my_name }} - build source"
    command:
      cmd: "{{ retronas_root }}/scripts/install_{{ my_name }}.sh"
      creates: "{{ retronas_root }}/bin/{{ my_name }}/{{ my_name }}"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - password file"
    copy:
      dest: /etc/{{ my_name }}_passwd
      content: retronas
      mode: 0600
      owner: root
      group: root

  - name: "{{ my_name }} - enable service(s)"
    service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items: "{{ systemd_units }}"
    when:
      - item.instance == 'no'
    notify: "{{ my_name }} - Restart service"

  handlers:

  - name: "{{ my_name }} - Restart service"
    service:
      name: "{{ item.name }}.{{ item.type }}"
      state: restarted
      daemon_reload: yes
    with_items: "{{ systemd_units }}"
    when: 
      - item.restart == 'yes'
      - item.instance == 'no'

- import_playbook: retronas_system_config.yml
  vars:
    module_name: "piscsi"
    module_state: "present"
