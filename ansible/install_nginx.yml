# Dependencies
- ansible.builtin.import_playbook: install_sslcert.yml

- hosts: localhost
  gather_facts: no

  vars:
    - my_name: "nginx"
    - my_file: "install_{{ my_name }}"

      nginx_sites_available: "/etc/{{ my_name }}/sites-available"
      nginx_sites_enabled: "/etc/{{ my_name }}/sites-enabled"

      required_paths:
      - /{{ retronas_path }}/www

      packages:
      - { name: "lighttpd", state: "absent" }
      - { name: "{{ my_name }}", state: "latest" }

      templates:
      - { name: "10-retronas.conf",         dest: "{{ nginx_sites_available }}",  mode: "0640", enable: "yes" }
      - { name: "99-retronas-files.conf",   dest: "{{ nginx_sites_available }}",  mode: "0640", enable: "yes" }

      sites_disable:
      - "default"

      systemd_units:
      - { name: "{{ my_name }}", type: 'service', state: "started", enabled: "yes", restart: "yes", instance: "no" }

      site_enable: ""

  tasks:

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - name: "{{ my_name }} - manage packages"
    ansible.builtin.package:
       name: "{{ item.name }}"
       state: "{{ item.state }}"
    with_items: "{{ packages }}"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - create paths"
    ansible.builtin.file:
      path: "{{ item }}"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      mode: 0750
      state: directory
    with_items: "{{ required_paths }}"

  - name: "{{ my_name }} - remove old config"
    ansible.builtin.file:
      path: "{{ item }}/99-retronas.conf"
      state: absent
    with_items:
      - "{{ nginx_sites_available }}"
      - "{{ nginx_sites_enabled }}"

  - name: "{{ my_name }} - config dirs"
    ansible.builtin.file:
      path: "/etc/{{ my_name }}/{{ item.path }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0750') }}"
      state: directory
    loop: "{{ lookup('filetree', 'templates/{{ my_file }}/conf', wantlist=True) }}"
    when: item.state == 'directory'

  - name: "{{ my_name }} - config files"
    ansible.builtin.template:
      src: "{{ item.src }}"
      dest: "/etc/{{ my_name }}/{{ item.path }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0644') }}"
      force: "{{ item.force|default('yes') }}"
    loop: "{{ lookup('filetree', 'templates/{{ my_file }}/conf', wantlist=True) }}"
    when: item.state == 'file'

  - name: "{{ my_name }} - www dirs"
    ansible.builtin.file:
      path: "/data/retronas/www/{{ item.path }}"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      mode: "{{ item.mode|default('0750') }}"
      state: directory
    loop: "{{ lookup('filetree', 'templates/{{ my_file }}/www', wantlist=True) }}"
    when: item.state == 'directory'

  - name: "{{ my_name }} - www files"
    ansible.builtin.template:
      src: "{{ item.src }}"
      dest: "/data/retronas/www/{{ item.path }}"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      mode: "{{ item.mode|default('0644') }}"
      force: "{{ item.force|default('yes') }}"
    loop: "{{ lookup('filetree', 'templates/{{ my_file }}/www', wantlist=True) }}"
    when: item.state == 'file'  

  - name: "{{ my_name }} - enable sites"
    ansible.builtin.file:
      src: "{{ nginx_sites_available }}/{{ item.name }}"
      dest: "{{ nginx_sites_enabled }}/{{ item.name }}"
      state: "link"
    with_items: "{{ templates }}"
    when: item.enable is defined and 
          item.enable == "yes"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable this site"
    ansible.builtin.file:
      src: "{{ nginx_sites_available }}/{{ site_enable }}"
      dest: "{{ nginx_sites_enabled }}/{{ site_enable }}"
      state: "link"
    when: site_enable | length > 0
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - disable sites"
    ansible.builtin.file:
      path: "{{ nginx_sites_enabled }}/{{ item }}"
      state: "absent"
    with_items: "{{ sites_disable }}"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - update runas user"
    ansible.builtin.lineinfile:
      path: /etc/{{ my_name }}/{{ my_name }}.conf
      regexp: '^user\s[a-z-]+;$'
      line: user {{ retronas_user }};
      state: present
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable startup services"
    ansible.builtin.service:
      name: "{{ item.name }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
    with_items: "{{ systemd_units }}"

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item.name }}"
      state: restarted
    with_items: "{{ systemd_units }}"
    when: item.restart == "yes"

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "nginx"
    module_state: "present"