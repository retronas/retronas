- hosts: localhost
  gather_facts: no

  vars:
    - my_name: "pygopherd"
    - my_file: "install_pygopherd"

    - my_packages:
      - python3

  tasks:

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - name: "{{ my_name }} - Install build tools"
    ansible.builtin.apt:
       name: "{{ my_packages }}" 
       state: latest

  - name: "{{ my_name }} - install script"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_file }}.sh.j2"
      dest: "{{ retronas_root }}/scripts/{{ my_file }}.sh"
      owner: root
      group: root
      mode: '0750'

  - name: "{{ my_name }} - build source"
    ansible.builtin.command:
      cmd: "{{ retronas_root }}/scripts/{{ my_file }}.sh"
      creates: "opt/pygopherd/bin/pygopherd"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - install config"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_name }}.conf.j2"
      dest: "{{ retronas_root }}/etc/{{ my_name }}.conf"
      owner: root
      group: root
      mode: '0644'
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - install service"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_name }}.service.j2"
      dest: "/usr/lib/systemd/system/{{ my_name }}.service"
      owner: root
      group: root
      mode: '0644'
    notify: "{{ my_name }} - Restart service"

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item }}"
      state: restarted
      daemon_reload: yes
    with_items:
      - "{{ my_name }}"

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "pygopherd"
    module_state: "present"

