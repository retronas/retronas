- hosts: localhost
  gather_facts: no

  vars:
    - my_name: "Netatalk3"
    - my_file: "install_netatalk3"

    - my_packages:
       - avahi-daemon
       - netatalk

    - my_services:
      - avahi-daemon
      - netatalk

    - config_settings:
      - { section: "Global", option: "uam list", value: "uams_guest.so uams_clrtxt.so uams_dhx.so uams_dhx2.so" }
      - { section: "Global", option: "hostname", value: "retroafp" }
      - { section: "Global", option: "mimic model", value: "PowerMac" }
      - { section: "Global", option: "zeroconf", value: "yes" }
      - { section: "Global", option: "log level", value: "info" }
      - { section: "Global", option: "log file", value: "/var/log/afp.log" }
      - { section: "Global", option: "afp listen", value: "0.0.0.0" }
      - { section: "Global", option: "include", value: "/etc/netatalk/retronas.conf" }

  tasks:

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - name: "{{ my_name }} - check if  netatalk package is available"
    ansible.builtin.shell: "/usr/bin/apt-cache search netatalk | grep netatalk"
    register: result
    failed_when:
      - result.rc >= 2

  - name: "{{ my_name }} - set fact if netatalk is not present"
    ansible.builtin.set_fact:
      no_netatalk: true
    when: result.rc == 1

  - name: "{{ my_name }} - end play if no netatalk package"
    ansible.builtin.meta: end_play
    when: no_netatalk is true

  - name: "{{ my_name }}  - unhold netatalk package"
    ansible.builtin.shell: "/usr/bin/apt-mark unhold netatalk"
    when: result.rc == 0

  - name: "{{ my_name }}  - install from repos"
    ansible.builtin.package:
       name: "{{ my_packages }}"
       state: latest

  - name: "{{ my_name }}  - configure"
    ansible.builtin.ini_file: 
      dest: /etc/netatalk/afp.conf
      section: "{{ item.section }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
    with_items: "{{ config_settings }}"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - configure retro shares"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/retronas.conf.j2"
      dest: /etc/netatalk/retronas.conf
      owner: root
      group: root
      mode: '0644'
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable startup services"
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
      enabled: yes
    with_items: "{{ my_services }}"

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item }}"
      state: restarted
    with_items: "{{ my_services }}"

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "netatalk3"
    module_state: "present"
  when: no_netatalk is undefined