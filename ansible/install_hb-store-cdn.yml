# Dependencies
- ansible.builtin.import_playbook: install_romdir.yml

- hosts: localhost
  gather_facts: no

  vars:
    - my_name: hb-store-cdn
    - my_file: "install_{{ my_name }}"
    - module_name: "hb-store-cdn"
    - module_state: "present"

    - systemd_units:
      - { name: "{{ my_name }}", type: 'service', state: "started", enabled: "yes", restart: "yes", instance: "no" }

    - packages:
      #- git
      #- npm
      - libnode108
      #- gcc
      #- g++
      #- build-essential

    - paths:
      - { name: "{{ my_name }}",    dest: "{{ retronas_root }}/bin",                state: "directory", mode: "0755", owner: "{{ retronas_user }}", group: "{{ retronas_group }}" }
      - { name: "bin",              dest: "{{ retronas_root }}/bin/{{ my_name }}",  state: "directory", mode: "0755", owner: "{{ retronas_user }}", group: "{{ retronas_group }}" }
      - { name: "ps4",              dest: "{{ retronas_path }}",                    state: "directory", mode: "0755", owner: "{{ retronas_user }}", group: "{{ retronas_group }}" }

    - templates:
      - { name: "{{ my_name }}-check.sh", dest: "{{ retronas_root }}/bin/{{ my_name }}", mode: "0755"}
      - { name: "{{ my_name }}.cron", dest: "/etc/cron.d" }
      - { name: "config.ini", dest: "{{ retronas_root }}/bin/{{ my_name }}" }
      - { name: "{{ my_file }}.sh", dest: "{{ retronas_root }}/scripts", mode: "0755" }
      - { name: "{{ my_name }}.service", dest: "/usr/lib/systemd/system" }

    - firewalld_ports:
      - { port: 6449, protocol: "tcp" }

  tasks:
  - name: "{{ my_name }} - Include systems map"
    ansible.builtin.include_vars: "retronas_systems.yml"

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - ansible.builtin.import_role:
      name: retronas.role.package.latest

  - ansible.builtin.import_role:
      name: retronas.role.paths
      
  - name: "{{ my_name }} - build layout"
    ansible.builtin.file:
      src: "{{ retronas_path }}/roms/sony/playstation4/pkg"
      dest: "{{ retronas_path }}/ps4/{{ my_name }}"
      state: link
    notify: "{{ my_name }} - Restart service"

  - ansible.builtin.import_role:
      name: retronas.role.templates
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - Install from source code"
    ansible.builtin.shell: "{{ retronas_root }}/scripts/{{ my_file }}.sh 2>&1 | tee {{ retronas_root }}/log/{{ my_file }}.log"
    args:
      creates: "{{ retronas_root }}/bin/{{ my_name }}/hb-store-cdn-cli-server"

  - name: "{{ my_name }} - enable service(s)"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items:
      "{{ systemd_units }}"
    when:
      - item.instance == 'no'
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable service(s)"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items:
      "{{ systemd_units }}"
    when:
      - item.instance == 'no'

  #- name: "{{ my_name }} - Remove npm and dependency hell"
  #  ansible.builtin.apt:
  #     name:  "npm"
  #     state: absent
  #     autoremove: yes

  - ansible.builtin.import_role:
      name: retronas.role.firewalld.port

  - ansible.builtin.import_role:
      name: retronas.role.system-config

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: restarted
      daemon_reload: yes
    with_items:
      "{{ systemd_units }}"
    when: 
      - item.restart == 'yes'
      - item.instance == 'no'

  - name: "{{ my_name }} - Restart instances"
    ansible.builtin.service:
      name: "{{ item.1.name }}{{ item.0.dest }}.{{ item.1.type }}"
      state: restarted
      daemon_reload: yes
    with_items:
      - "{{ system_map }}"
      - "{{ systemd_units }}"
    when: 
      - item.1.restart == 'yes'
      - item.1.instance == 'yes'
