# Dependencies
- ansible.builtin.import_playbook: install_romdir.yml

- hosts: localhost
  gather_facts: no

  vars:
    - my_name: hb-store-cdn
    - my_file: "install_{{ my_name }}"

    - systemd_units:
      - { name: "{{ my_name }}", type: 'service', state: "started", enabled: "yes", restart: "yes", instance: "no" }

    - packages:
      - git
      - npm
      - gcc
      - g++
      - build-essential

    - templates:
      - { name: "{{ my_name }}-check.sh", dest: "{{ retronas_root }}/bin/{{ my_name }}", mode: "0755"}
      - { name: "{{ my_name }}.cron", dest: "/etc/cron.d" }

  tasks:
  - name: "{{ my_name }} - Include systems map"
    ansible.builtin.include_vars: "retronas_systems.yml"

  - name: "{{ my_name }} - Load RetroNAS config"
    ansible.builtin.include_vars: retronas_vars.yml

  - name: "{{ my_name }} - Install build tools"
    ansible.builtin.package:
       name: "{{ packages }}"
       state: latest

  - name: "{{ my_name }} - install path"
    ansible.builtin.file:
      path: "{{ retronas_root }}/bin/{{ my_name }}/"
      owner: "root"
      group: "root"
      state: directory
      mode: "0775"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - bin path"
    ansible.builtin.file:
      path: "{{ retronas_root }}/bin/{{ my_name }}/bin"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      state: directory
      mode: "0775"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - build top level"
    ansible.builtin.file:
      path: "{{ retronas_path }}/ps4"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      state: directory
      mode: "0775"
    notify: "{{ my_name }} - Restart service"
      
  - name: "{{ my_name }} - build layout"
    ansible.builtin.file:
      src: "{{ retronas_path }}/roms/sony/playstation4/pkg"
      dest: "{{ retronas_path }}/ps4/{{ my_name }}"
      state: link
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - Copy in config"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/config.ini.j2"
      dest: "{{ retronas_root }}/bin/{{ my_name }}/config.ini"
      owner: "{{ retronas_user }}"
      group: "{{ retronas_group }}"
      mode: 0644
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - Generate {{ my_file }} script"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ my_file }}.sh.j2"
      dest: "{{ retronas_root }}/scripts/{{ my_file }}.sh"
      owner: root
      group: root
      mode: 0755

  - name: "{{ my_name }} - Install from source code"
    ansible.builtin.shell: "{{ retronas_root }}/scripts/{{ my_file }}.sh 2>&1 | tee {{ retronas_root }}/log/{{ my_file }}.log"
    args:
      creates: "{{ retronas_root }}/bin/{{ my_name }}/hb-store-cdn-cli-server"

  - name: "{{ my_name }} - templates"
    ansible.builtin.template:
      src: "templates/{{ my_file }}/{{ item.name }}.j2"
      dest: "{{ item.dest }}/{{ item.name }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0644') }}"
      force: "{{ item.force|default('yes') }}"
    with_items: "{{ templates }}"

  - name: "{{ my_name }} - create startup service(s)"
    ansible.builtin.template:
      src: templates/{{ my_file }}/{{ item.name }}.{{ item.type }}.j2
      dest: /usr/lib/systemd/system/{{ item.name }}.{{ item.type }}
      owner: root
      group: root
      mode: 0644
    with_items:
      "{{ systemd_units }}"
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable service(s)"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items:
      "{{ systemd_units }}"
    when:
      - item.instance == 'no'
    notify: "{{ my_name }} - Restart service"

  - name: "{{ my_name }} - enable service(s)"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: "{{ item.state }}"
      enabled: "{{ item.enabled }}"
      daemon_reload: yes
    with_items:
      "{{ systemd_units }}"
    when:
      - item.instance == 'no'

  - name: "{{ my_name }} - Remove npm and dependency hell"
    ansible.builtin.apt:
       name:  "npm"
       state: absent
       autoremove: yes

  handlers:

  - name: "{{ my_name }} - Restart service"
    ansible.builtin.service:
      name: "{{ item.name }}.{{ item.type }}"
      state: restarted
      daemon_reload: yes
    with_items:
      "{{ systemd_units }}"
    when: 
      - item.restart == 'yes'
      - item.instance == 'no'

  - name: "{{ my_name }} - Restart instances"
    ansible.builtin.service:
      name: "{{ item.1.name }}{{ item.0.dest }}.{{ item.1.type }}"
      state: restarted
      daemon_reload: yes
    with_items:
      - "{{ system_map }}"
      - "{{ systemd_units }}"
    when: 
      - item.1.restart == 'yes'
      - item.1.instance == 'yes'

- ansible.builtin.import_playbook: retronas_system_config.yml
  vars:
    module_name: "hb-store-cdn"
    module_state: "present"